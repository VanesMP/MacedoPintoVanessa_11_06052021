{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bibi computer\\\\Desktop\\\\MacedoPintoVanessa_11_06052021\\\\kasa\\\\src\\\\Components\\\\SlideShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"../data.json\";\nimport PropTypes from 'prop-types';\nimport arrowslide from \"../assets/arrowSlide.png\";\nimport \"../styles/components-style/SlideShow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SlideShow(_ref) {\n  _s();\n\n  let {\n    views\n  } = _ref;\n  //etat initail du state\n  const [page, setPage] = useState(0); //methode: image suivant\n  //si l'image affichée est la dernière de la galerie, qaund l'utilisateur clique sur \"image suivante\", la galerie affiche la première image. \n\n  const nextSlide = () => {\n    setPage(page < views.length - 1 ? page + 1 : 0);\n  }; //methode: image precedente\n  //Si l'utilisateur se trouve à la première image et qu'il clique sur \"image précédente\", la galerie affiche la dernière image.\n\n\n  const prevSlide = () => {\n    setPage(page > 0 ? page - 1 : views.length - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"sectionSheet\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerSlide\",\n      children: [views.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: picture,\n        alt: \"galerie de la location\",\n        className: \"sliderItem\" + (page === index ? ' active' : \"\")\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this)), views.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonSlide\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"prevButton \",\n          src: arrowslide,\n          alt: \"arrow prev\",\n          onClick: prevSlide\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"nextButton \",\n          src: arrowslide,\n          alt: \"arrow next\",\n          onClick: nextSlide\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"numberOfPages\",\n        children: [page + 1, \" / \", views.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 17\n  }, this);\n}\n\n_s(SlideShow, \"54dVtaqv/8WouJ+rx2t67oLHEmc=\");\n\n_c = SlideShow;\nSlideShow.propTypes = {\n  picture: PropTypes.string\n};\nexport default SlideShow;\n/*Condition à la volée avec l’opérateur logique &&\r\nÇa fonctionne parce qu’en JavaScript, true && expression est toujours évalué \r\nà expression, et false && expression est toujours évalué à false.\r\nDu coup, si la condition vaut true, l’élément juste après && sera affiché. \r\nSi elle vaut false, React va l’ignorer et le sauter.*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideShow\");","map":{"version":3,"sources":["C:/Users/bibi computer/Desktop/MacedoPintoVanessa_11_06052021/kasa/src/Components/SlideShow.jsx"],"names":["React","useState","PropTypes","arrowslide","SlideShow","views","page","setPage","nextSlide","length","prevSlide","map","picture","index","propTypes","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,OAAO,0CAAP;;;AAEA,SAASC,SAAT,OAA6B;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAEzB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAD,CAAhC,CAHyB,CAKzB;AACA;;AACA,QAAMO,SAAS,GAAG,MAAM;AACpBD,IAAAA,OAAO,CAACD,IAAI,GAAGD,KAAK,CAACI,MAAN,GAAe,CAAtB,GAA0BH,IAAI,GAAG,CAAjC,GAAqC,CAAtC,CAAP;AACH,GAFD,CAPyB,CAWzB;AACA;;;AACA,QAAMI,SAAS,GAAG,MAAM;AACpBH,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsBD,KAAK,CAACI,MAAN,GAAe,CAAtC,CAAP;AACH,GAFD;;AAIQ,sBACI;AAAS,IAAA,SAAS,EAAC,cAAnB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,iBACHJ,KAAK,CAACM,GAAN,CAAU,CAACC,OAAD,EAAUC,KAAV,kBACH;AAAiB,QAAA,GAAG,EAAED,OAAtB;AAA+B,QAAA,GAAG,EAAC,wBAAnC;AAA4D,QAAA,SAAS,EAAG,gBAAeN,IAAI,KAAKO,KAAT,GAAiB,SAAjB,GAA6B,EAA5C;AAAxE,SAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,cADP,CADG,EAIHR,KAAK,CAACI,MAAN,GAAe,CAAf,iBACG;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEN,UAAlC;AAA8C,UAAA,GAAG,EAAC,YAAlD;AAAgE,UAAA,OAAO,EAAEO;AAAzE;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEP,UAAlC;AAA8C,UAAA,GAAG,EAAC,YAAlD;AAA+D,UAAA,OAAO,EAAEK;AAAxE;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA,eASJ;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA,mBAAiCF,IAAI,GAAE,CAAvC,SAA6CD,KAAK,CAACI,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,cATI;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeX;;GAhCQL,S;;KAAAA,S;AAkCTA,SAAS,CAACU,SAAV,GAAsB;AAClBF,EAAAA,OAAO,EAAEV,SAAS,CAACa;AADD,CAAtB;AAIA,eAAeX,SAAf;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../data.json\";\r\nimport PropTypes from 'prop-types';\r\nimport arrowslide from \"../assets/arrowSlide.png\"\r\n\r\nimport \"../styles/components-style/SlideShow.css\"\r\n\r\nfunction SlideShow ({views}) {\r\n\r\n    //etat initail du state\r\n    const [page, setPage] = useState(0)\r\n\r\n    //methode: image suivant\r\n    //si l'image affichée est la dernière de la galerie, qaund l'utilisateur clique sur \"image suivante\", la galerie affiche la première image. \r\n    const nextSlide = () => {\r\n        setPage(page < views.length - 1 ? page + 1 : 0);\r\n    }\r\n    \r\n    //methode: image precedente\r\n    //Si l'utilisateur se trouve à la première image et qu'il clique sur \"image précédente\", la galerie affiche la dernière image.\r\n    const prevSlide = () => {\r\n        setPage(page > 0 ? page - 1 : views.length - 1)\r\n    }\r\n\r\n            return (\r\n                <section className=\"sectionSheet\">\r\n                    <div className=\"containerSlide\">\r\n                {views.map((picture, index) => (\r\n                        <img key={index} src={picture} alt=\"galerie de la location\" className= {\"sliderItem\"+ (page === index ? ' active' : \"\")} />\r\n                        ))}\r\n                {views.length > 1 &&\r\n                    <div className=\"buttonSlide\">\r\n                    <img className=\"prevButton \" src={arrowslide} alt=\"arrow prev\"  onClick={prevSlide}/>\r\n                    <img className=\"nextButton \" src={arrowslide} alt=\"arrow next\" onClick={nextSlide}/>\r\n                    </div>}      \r\n                <span className=\"numberOfPages\">{page +1} / {views.length}</span>\r\n                </div>\r\n                </section>\r\n            )\r\n}\r\n\r\nSlideShow.propTypes = {\r\n    picture: PropTypes.string,\r\n}\r\n\r\nexport default SlideShow;\r\n\r\n/*Condition à la volée avec l’opérateur logique &&\r\nÇa fonctionne parce qu’en JavaScript, true && expression est toujours évalué \r\nà expression, et false && expression est toujours évalué à false.\r\nDu coup, si la condition vaut true, l’élément juste après && sera affiché. \r\nSi elle vaut false, React va l’ignorer et le sauter.*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}